@page
@model EatYourFeats.Pages.InventoryModel
@{
    ViewData["Title"] = "Eat Your Feats!";
    ViewData["GamePoints"] = Model.CurrentGame.Score;
    var startTimeString = Model.CurrentGame.StartTime.ToString("yyyy-MM-ddTHH:mm:ssZ");
    var endTimeString = Model.CurrentGame.EndTime.ToString("yyyy-MM-ddTHH:mm:ssZ");
    var completedPoints = TempData["CompletedTaskPoints"] != null ? (int)TempData["CompletedTaskPoints"] : 0;
    var selectedItem = TempData["SelectedItem"] as string;
}
@{
    Layout = "_ShopLayout";
}
<h1>Eat Your Feats!</h1>

<form method="post">
<div class="inventory-container" style="flex-grow: 1; overflow-y: auto; min-height: 0vh; max-height: 80vh; padding: 10px;">
    <table id="item-list">
        <thead>
            <tr>
                <th>Select</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.InventoryItems)
            {
                var item_url = $"/Images/placeholder.png"; 
                <tr>
                    <td>
                        <input type="radio" name="SelectedItemId" value="@item.Id" />
                        <img src="@item_url" alt="placeholder"> @item.ItemName
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


    <button id="buy-items" type="submit" formaction="/Inventory?handler=ConfirmSelection">Confirm Item Selection</button>
</form>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            @error.ErrorMessage
        }
    </div>
}

@section Scripts {
    <script>
        function calculateRemainingTime(startTime, endTime) {
            const now = new Date().getTime();
            const start = new Date(startTime).getTime();
            const end = new Date(endTime).getTime();
            const distance = end - start - (now - start);

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            return { days, hours, minutes, seconds };
        }

        function updateCountdownTimer() {
            const startTime = '@startTimeString';
            const endTime = '@endTimeString';
            const remainingTime = calculateRemainingTime(startTime, endTime);

            document.getElementById('countdown-timer').innerHTML =
                `${remainingTime.days}d ${remainingTime.hours}h ${remainingTime.minutes}m ${remainingTime.seconds}s`;

            if (remainingTime.days >= 0 && remainingTime.hours >= 0 && remainingTime.minutes >= 0 && remainingTime.seconds >= 0) {
                setTimeout(updateCountdownTimer, 1000);
            } else {
                document.getElementById('countdown-timer').innerHTML = "Time's up!";
            }
        }

        updateCountdownTimer();
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
