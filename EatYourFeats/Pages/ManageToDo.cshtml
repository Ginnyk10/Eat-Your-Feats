@page
@model EatYourFeats.Pages.ManageToDoModel
@{
    ViewData["Title"] = "Eat Your Feats!";
    ViewData["GamePoints"] = Model.CurrentGame.Score;
    var startTimeString = Model.CurrentGame.StartTime.ToString("yyyy-MM-ddTHH:mm:ssZ");
    var endTimeString = Model.CurrentGame.EndTime.ToString("yyyy-MM-ddTHH:mm:ssZ");
    var completedPoints = TempData["CompletedTaskPoints"] != null ? (int)TempData["CompletedTaskPoints"] : 0;
    var selectedItem = Model.EquippedItem;
}

@{
    Layout = "_MainGameLayout";
}

<h1>Eat Your Feats!</h1>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            @error.ErrorMessage
        }
    </div>
}

<table id="todo-list">
    <thead>
        <tr>
            <th>Task</th>
            <th>Points</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model.Tasks)
        {
            <tr>
                <td>
                    <input type="checkbox" name="SelectedTaskIds" value="@task.Id" /> @task.Name
                </td>
                <td>@task.Points</td>
            </tr>
        }
    </tbody>
</table>

<button id="mark-completed" type="submit" formaction="/ManageToDo?handler=MarkCompleted">Mark task(s) as completed</button>
@if (completedPoints > 0)
{
    <div class="alert">
        You just earned @completedPoints points!
    </div>
}

@section Scripts {
    <script>
        // Function to check the equipped item's expiration
        function checkEquippedItem(equippedItemName, timeEquipped) {
            const now = new Date().getTime();
            const equippedTime = new Date(timeEquipped).getTime();

            // Check if item is expired (12 hours in milliseconds)
            const isExpired = now - equippedTime >= 12000;// * 60 * 60 * 1000;

            const alertDiv = document.querySelector('.alert');
            if (isExpired) {
                // Hide the alert if expired
                if (alertDiv) alertDiv.style.display = 'none';
            } else {
                // Update the UI with the equipped item's name
                if (alertDiv) {
                    alertDiv.style.display = 'block';
                    alertDiv.textContent = `Equipped: ${equippedItemName}`;
                }
            }

            // Recheck every second
            // yes this is excessive but preferable for demo purposes
            setTimeout(() => checkEquippedItem(equippedItemName, timeEquipped), 1000);
        }

        // Data injected from server
        const equippedItemName = '@(selectedItem?.ItemName ?? "null")';
        const timeEquipped = '@(selectedItem?.TimeEquipped.ToString("o") ?? "")';

        // Start checking equipped item expiration if there's an item
        if (equippedItemName !== "null" && timeEquipped !== "") {
            checkEquippedItem(equippedItemName, timeEquipped);
        }

        // Function to calculate the remaining time
        function calculateRemainingTime(startTime, endTime) {
            const now = new Date().getTime();
            const start = new Date(startTime).getTime();
            const end = new Date(endTime).getTime();
            const distance = end - start - (now - start);

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            return { days, hours, minutes, seconds };
        }

        // Function to update the countdown timer display
        function updateCountdownTimer() {
            const startTime = '@startTimeString';
            const endTime = '@endTimeString';
            const remainingTime = calculateRemainingTime(startTime, endTime);

            document.getElementById('countdown-timer').innerHTML =
                `${remainingTime.days}d ${remainingTime.hours}h ${remainingTime.minutes}m ${remainingTime.seconds}s`;

            if (remainingTime.days >= 0 && remainingTime.hours >= 0 && remainingTime.minutes >= 0 && remainingTime.seconds >= 0) {
                setTimeout(updateCountdownTimer, 1000);
            } else {
                document.getElementById('countdown-timer').innerHTML = "Time's up!";
            }
        }

        // Start the countdown timer
        updateCountdownTimer();
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

@if (selectedItem != null)
{
    <div class="alert">
        Equipped: @selectedItem.ItemName
    </div>
}

<!--button that opens the inventory page-->
<button type="button" onclick="window.location.href='/ManageToDo?handler=OpenInventory'">Open Inventory</button> 

